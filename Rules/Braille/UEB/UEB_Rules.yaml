---
-
   name: default
   tag: msqrt
   match: "."
   replace: 
   - t: "1‚†©"
   - x: "*"
   - t: "1‚†¨"

-
   name: default
   tag: mroot
   match: "."
   replace: 
   - t: "1‚†©‚†î"
   - test:
      if:   # FIX: need to add arbitrary shapes here (see also msub/msup)
      - "*[2][self::m:mn or"
              # next test is to make sure there is just one symbol
      - "     ((self::m:mi or self::m:mo) and string-length(text())=1) or"
      - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
      - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
      - "     IsInDefinition(., 'Arrows')"
      - "    ]"
      then:
      - x: "*[2]"
      else:
      - t: "1‚†£"
      - x: "*[2]"
      - t: "1‚†ú"
   - t: "#"    # signal end of script/numeric mode
   - x: "*[1]"
   - t: "1‚†¨"
        
               
# Fraction rules
   # The fraction part of a mixed number is always simple
   # They also differ because a two character sequence is needed to bracket the fraction
   # The invisible plus should produce an empty string

-
   name: common-fraction-mixed-number
   tag: mfrac
   match:
      - "preceding-sibling::*[1][self::m:mo][text()='\u2064'] and" # preceding element is invisible plus
      - "*[1][self::m:mn][not(contains(., '.'))]   and" 
      - "*[2][self::m:mn][not(contains(., '.'))]"
   replace: 
   - t: "#"    # signal end of previous numeric mode
   - x: "*[1]"
   - t: "N‚†å"
   - x: "*[2]"

-
   name: simple-number
   tag: mfrac
   match: "*[1][self::m:mn] and *[2][self::m:mn]"
   replace: 
   - t: "#"    # signal end of any previous numeric mode (probably not needed, but...)
   - x: "*[1]"
   - t: "N‚†å"
   - x: "*[2]"

-
   name: default
   tag: mfrac
   match: "."
   replace: 
   - t: "1‚†∑"
   - x: "*[1]"
   - t: "‚†®‚†å"
   - x: "*[2]"
   - t: "1‚†æ"


#
# Matrix/Determinant rules
# matrix and determinant are the same other than "matrix"/"determinant" based on the bracketing chars
# we don't do spatial layout, instead the beginning/ending of each row uses the enlarged bracketing chars
-
   name: default-matrix
   tag: mrow
   variables:
      - RowStart: "*[1]"
      - RowEnd: "*[3]"
   match:
      - "*[2][self::m:mtable] and"
      - (IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '|', '|'))
   replace: [x: "*[2]"]
-
   name: default-mtable
   tag: mtable
   match: "."
   replace: [x: "*"]
-
  name: default
  tag: [mtr, mlabeledtr]
  match: "."
  replace:
   - test: 
      if: "count(parent::*) > 1"
      then: [t: "‚††"]
   - t: ""
   - x: $RowStart
   - test:
      if: .[self::m:mlabeledtr]
      then:
         - t: "‚†ó‚†ï‚†∫W‚†á‚†Å‚†É‚†ë‚†á‚†∏‚†í"  # "row label:"
         - x: "*[1]/*"           # contents of row label
   - test:
      if: .[self::m:mlabeledtr]
      then: [x: "*[position()>1]"]
      else: {x: "*"}
   - test: 
      if: "count(parent::*) > 1"
      then: [t: "‚††"]
   - x: $RowEnd
-
  name: default
  tag: mtd
  match: "."
  replace:
  - test:
      if: "*"
      then:
      - test: 
         if: "preceding-sibling::*"
         then: [t: "W"]
      - x: "*"
      # else nothing to braille

-
   name: no-content
   tag: math
   match: "not(*)"      # empty
   replace: [t: "W"]    # not sure that is right, but this shouldn't happen

-
   name: default
   tag: math
   match: "."
   variables:
      - RowStart: "''"           # empty string -- it needs to be set
      - RowEnd: "''"             # empty string -- it needs to be set
      - NewScriptContext: "''"    # empty string -- it needs to be set
   replace: [x: "*"]

-
   #GTM 14.3.3 (not sure what else vertical juxtaposition applies to)
   name: binomial-frac
   tag: mrow
   match: "IsBracketed(., '(', ')') and *[2][self::m:mfrac][@linethickness=0]"
   replace: 
   - x: "*[1]"
   - x: "*[2]/*[1]"
   - t: "‚†∞‚†ª"
   - x: "*[2]/*[2]"
   - x: "*[3]"

-
    name: empty-mrow
    tag: mrow
    match: "not(*)"
    replace: [t: "W"] # not sure what is correct -- if in a fraction, probably something is better than nothing

-
   name: default
   tag: mrow
   match: "."
   replace: [x: "*"]

-
   # add space after these ops when they are prefix operators
   # note: other shapes are <mi>s and canonicalization turns them into function calls (which will include spaces after them)
   name: prefix-geometry-ops
   tag: mo
   match:
      - "parent::*[count(*) = 2 and name()='mrow' and not(preceding-sibling::*)] and"
      - "IsInDefinition(., 'GeometryPrefixOperators')"
   replace:
      - x: "text()"
      - t: "W"

-
   name: default
   tag: mo
     # add spaces around comparison operators unless they are in a script position,
   variables: [MaybeAddSpaces: "parent::*[self::m:mrow] and $NewScriptContext='' and IsInDefinition(., 'NemethComparisonOperators')"]
   match: "."
   replace:
      - test:
         if: "$MaybeAddSpaces"
         then:
            - test:
               if: "preceding-sibling::* and 
                    not(IsInDefinition(preceding-sibling::*[1], 'NemethPunctAndOpenBeforeSymbols'))" #Rule 151
               then: [t: "W"]
      - x: "text()"
      - test:
         if: "$MaybeAddSpaces and following-sibling::* and 
              not(IsInDefinition(following-sibling::*[1], 'NemethPunctAndOpenAfterSymbols'))" #Rule 151"
         then: [t: "W"]

-
   # Non-breaking whitespace is added to the start/end of numbers in cases of adjoining text to help the parse.
   # These generate a different char inside of a number, so we peel them off here because it doesn't seem possible
   # to ask "what character position am I inside of an mn?" in unicode.yaml
   # Here we deal with the messy abnormal case separately
   name: peel-off-spaces
   tag: [mn, mi]
   match: "starts-with(., '\u00A0') or substring(., string-length(.), 1)='\u00A0'"
   replace:
   - test:
      if: "starts-with(., '\u00A0')"
      then:
      - t: "W"
      - test:
         if: "substring(., string-length(.), 1)='\u00A0'"
         then:
         - x: "BrailleChars(., 'UEB', 2, string-length(.)-1)"
         - test:
            if: following-sibling::*[2][@class='MathML-unit' or BaseNode(.)[@class='MathML-unit']]  # '*[2]' to skip invisible times
            then: [t: "ùêñ"]   # BANA 5(a) -- Units are treated as separate exprs
            else: [t: "W"]
         else:
         - x: "BrailleChars(., 'UEB', 2, string-length(.))"
      else:
      - test:
         if: "substring(., string-length(.), 1)='\u00A0'"
         then:
         - x: "BrailleChars(., 'UEB', 1, string-length(.)-1)"
         - test:
            if: following-sibling::*[2][@class='MathML-unit' or BaseNode(.)[@class='MathML-unit']]  # '*[2]' to skip invisible times
            then: [t: "ùêñ"]   # BANA 5(a) -- Units are treated as separate exprs
            else: [t: "W"]
         else:
         - x: "BrailleChars(., 'UEB', 1, string-length(.))"

-
   name: default
   tag: mn
   match: "."
   replace:
   # - test:
   #    if: "@data-roman-numeral"  # GTM 2.6 -- roman numerals are always G1
   #    then: [t: "1"]
   - x: "BrailleChars(., 'UEB')"
      

-
   # FIX: need to deal with all caps
   name: default
   tag: [mi, mtext]
   match: "."
   replace:
      - x: "BrailleChars(., 'UEB')"
      

-
   name: default
   tag: mstyle
   match: "."
   replace:
   - test:
      if: "*"
      then: [x: "*"]
      # else do nothing -- no content

-
   name: single-char-exceptions    # GTM 12
   tag: [mover, munder]
   match: "*[2][string-length(.) = 1 and ( translate(., '_¬Ø‚Üí.~^','')='' or (self::m:mover and text()='‚åí') )]"
   replace: 
   - test:
      # omit grouping indicators in the following cases
      if:   # FIX: need to add arbitrary shapes here (also for mroot)
      - "(*[1][self::m:mn or"
              # next test is to make sure there is just one symbol
      - "     ((self::m:mi or self::m:mo) and string-length(text())=1) or"
      - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
      - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
      - "     IsInDefinition(., 'Arrows')"
      - "    ]) and"
      - "not(*[1][self::m:mn] and preceding-sibling::*[1][text()='\u2062'][preceding-sibling::*[1][self::m:mn]])"  # need to make clear this 'mn' is base
      then: [x: "*[1]"]
      else:
      - t: "1‚†£"
      - x: "*[1]"
      - t: "1‚†ú"
   - test:
      if: "*[2][translate(., '_¬Ø‚Üí^', '') = '']"
      then: [t: "1"]
   - test:
      if: "self::m:munder"
      then: [t: "‚††"]
   - test:
      - if: "*[2][text()='_' or text()='¬Ø']"
        then: [t: "‚†±"]
      - else_if: "*[2][text()='‚Üí']"
        then: [t: "‚†ò‚†±"]
      - else_if: "*[2][text()='.']"
        then: [t: "‚†ò‚†≤"]
      - else_if: "*[2][text()='~']"
        then: [t: "‚†∏‚†±"]
      - else_if: "*[2][text()='^']"
        then: [t: "‚†ê‚†± "]
        else: [t: "‚†®‚†∏‚†±"]    # arc/‚åí

-
   name: single-char-exceptions    # RUEB 3.11 -- ¬∞ and various prime/minute/seconds aren't treated as if superscripts
   tag: [msup]
   match: "*[2][translate(., \"'*`¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Ä≤‚Ä≥‚Ä¥‚Äµ‚Ä∂‚Ä∑‚Åó\",'')='']"
   replace: [x: "*"]

-
   name: default
   tag: [msub, msup, munder, mover]
   match: "."
   replace: 
   - test:
      # omit grouping indicators in the following cases
      if:
      - "not((self::m:mover or self::m:munder) and "
      - "    *[1][self::m:mn] and preceding-sibling::*[1][text()='\u2062'][preceding-sibling::*[1][self::m:mn]]"  # need to make clear this 'mn' is base
      - "   )"
      then: [x: "*[1]"]
      else:
      - t: "1‚†£"
      - x: "*[1]"
      - t: "1‚†ú"
   - with:   # this could be tighter and be just around the *[2] part, but this is consistent with msubsup below
      variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
      replace:
      - test:
         - if: "self::m:msup"
           then: [t: "1‚†î"]
         - else_if: "self::m:msub"
           then: [t: "1‚†¢"]
         - else_if: "self::m:munder"
           then: [t: "1‚†®‚†¢"]
           else: [t: "1‚†®‚†î"]  # mover
      - test:
         # omit grouping indicators in the following cases
         if:   # FIX: need to add arbitrary shapes here (also for mroot) also multi-char leaf translations except mi
         - "*[2][self::m:mn or"
              # next test is to make sure there is just one symbol
              # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
         - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
         - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
         - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
         - "     IsInDefinition(., 'Arrows')"
         - "    ]"
         then: [x: "*[2]"]
         else:
         - t: "1‚†£"
         - x: "*[2]"
         - t: "1‚†ú"
   - t: "#"   # signal end script/numeric mode


-
   name: msubsup_default_mmultiscripts_equiv
   tag: [msubsup, munderover, mmultiscripts] # mmultiscripts with only sub/sup postscript
   match: "count(*)=3"    # catches mmultiscripts equiv
   replace: 
   - test:
      # omit grouping indicators in the following cases
      if:   # FIX: need to add arbitrary shapes here (also for mroot)
      - "(self::m:msub or self::m:msup) or"
      - "(*[1][self::m:mn or self::m:mi or self::m:mo or"
      - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
      - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
      - "     IsInDefinition(., 'Arrows')"
      - "    ])"
      then: [x: "*[1]"]
      else:
      - t: "1‚†£"
      - x: "*[1]"
      - t: "1‚†ú"
   - with: 
      variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
      replace:
      - test:
         - if: "self::m:munderover"
           then: [t: "1‚†®‚†¢"]
           else: [t: "1‚†¢"]
      - test:
         # omit grouping indicators in the following cases
         if:   # FIX: need to add arbitrary shapes here (also for mroot) also multi-char leaf translations except mi
         - "*[2][self::m:mn or"
              # next test is to make sure there is just one symbol
              # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
         - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
         - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
         - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
         - "     IsInDefinition(., 'Arrows')"
         - "    ]"
         then: [x: "*[2]"]
         else:
         - t: "1‚†£"
         - x: "*[2]"
         - t: "1‚†ú"
      - test:
         - if: "self::m:munderover"
           then: [t: "1‚†®‚†î"]
           else: [t: "1‚†î"]
      - test:
         # omit grouping indicators in the following cases
         if:   # FIX: need to add arbitrary shapes here (also for mroot) also multi-char leaf translations except mi
         - "*[3][self::m:mn or"
              # next test is to make sure there is just one symbol
              # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
         - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
         - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
         - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
         - "     IsInDefinition(., 'Arrows')"
         - "    ]"
         then: [x: "*[3]"]
         else:
         - t: "1‚†£"
         - x: "*[3]"
         - t: "1‚†ú"
   - t: "#"   # signal end script/numeric mode

-
   name: default
   tag: mmultiscripts
   match: "."
   replace:
      - with:
         variables: [Prescripts: "m:mprescripts/following-sibling::*"]
         replace:
            # there isn't an easy way to deal with an arbitrary number of prescripts, so we handle three which probably works for 99.9999% of the cases
            - test:
               if: "count($Prescripts) > 0"
               then:
                  - test:
                     if: "not($Prescripts[1][self::m:none])"
                     then:
                        - with:
                           variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                           replace:
                              - t: "1‚†¢"
                              - test:
                                 # omit grouping indicators in the following cases
                                 if:   # FIX: need to add arbitrary shapes here (also for mroot)
                                 - "$Prescripts[1][self::m:mn or self::m:mi or self::m:mo or"
                                 - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                                 - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                                 - "     IsInDefinition(., 'Arrows')"
                                 - "    ]"
                                 then: [x: "$Prescripts[1]"]
                                 else:
                                 - t: "1‚†£"
                                 - x: "$Prescripts[1]"
                                 - t: "1‚†ú"
                  - test:
                     if: "not($Prescripts[2][self::m:none])"
                     then:
                        - with:
                           variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                           replace:
                              - t: "1‚†î"
                              - test:
                                 # omit grouping indicators in the following cases
                                 if:   # FIX: need to add arbitrary shapes here (also for mroot)
                                 - "$Prescripts[2][self::m:mn or self::m:mi or self::m:mo or"
                                 - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                                 - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                                 - "     IsInDefinition(., 'Arrows')"
                                 - "    ]"
                                 then: [x: "$Prescripts[2]"]
                                 else:
                                 - t: "1‚†£"
                                 - x: "$Prescripts[2]"
                                 - t: "1‚†ú"
      - x: "*[1]"
      - with:
         variables: [Postscripts: "*[position()>1][not(preceding-sibling::m:mprescripts)][not(self::m:mprescripts)]"]
         replace:
            # there isn't an easy way to deal with an arbitrary number of postscripts, so we handle four which probably works for 99.9999% of the cases
            - test:
               if: "count($Postscripts) >= 2"
               then:
                  - test:
                     if: "not($Postscripts[1][self::m:none])"
                     then:
                        - with:
                           variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                           replace:
                              - t: "1‚†¢"
                              - test:
                                 # omit grouping indicators in the following cases
                                 if:   # FIX: need to add arbitrary shapes here (also for mroot)
                                 - "$Postscripts[1][self::m:mn or self::m:mi or self::m:mo or"
                                 - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                                 - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                                 - "     IsInDefinition(., 'Arrows')"
                                 - "    ]"
                                 then: [x: "$Postscripts[1]"]
                                 else:
                                 - t: "1‚†£"
                                 - x: "$Postscripts[1]"
                                 - t: "1‚†ú"
                  - test:
                     if: "not($Postscripts[2][self::m:none])"
                     then:
                        - with:
                           variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                           replace:
                              - t: "1‚†î"
                              - test:
                                 # omit grouping indicators in the following cases
                                 if:   # FIX: need to add arbitrary shapes here (also for mroot)
                                 - "$Postscripts[2][self::m:mn or self::m:mi or self::m:mo or"
                                 - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                                 - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                                 - "     IsInDefinition(., 'Arrows')"
                                 - "    ]"
                                 then: [x: "$Postscripts[2]"]
                                 else:
                                 - t: "1‚†£"
                                 - x: "$Postscripts[2]"
                                 - t: "1‚†ú"
      - t: "#"   # signal end script/numeric mode
                  

-
  # Note: @notation can contain more than one value
  # I don't think UEB has a good way to represent all notations, especially when in combination
  # Note:
  #   Shape indicator: ‚†´
  #   Physical enclosure: ‚†™  (think plus inside of a circle)
  #   Superposition indicator: ‚†Ø  (think contour integral)
  #   Cancellation: ‚†à‚†± (line through previous char -- will use for horizontal, vertical, diagonal lines)
  #   Line over/under: use GTM 12 bar rule (over ‚†±, under ‚††‚†±)
  #   Horizontal juxtaposition indicator: ‚†ø
  #   Vertical juxtaposition indicator: ‚†ª (think ‚âó)
  #   Termination indicator: ‚†± 
  #
  # We place left and right outside of other notations
  # Boxes and circle are does as physical enclosure (shape before base)
  # Arrows are done as superposition (after base)
  # top and bottom are done as "bars" (GTM 12) (after base)

   name: default
   tag: menclose
   match: "."
   # FIX: can't find a rule that says anything about comparison operator spacing and enclosure
   variables: [AddSpaces: "parent::*[self::m:mrow] and *[1][ self::m:mo and IsInDefinition(., 'NemethComparisonOperators')]"]
   replace:
   - test:
      if: "contains(concat(' ', normalize-space(@notation), ' '), ' left ')"                  #avoid 'leftarrow'
      then: [t: "‚†∏"]
   - test:
      if: "contains(@notation,'box')"                  # box and roundedbox
      then:
      # - test:
      #       if: "$AddSpaces"
      #       then: [t: " "]
      - t: "1‚†´‚†º‚†ô"                                  # square (no rectangle in UEB)
   - test:
      if: "contains(@notation,'circle')"
      then:
      # - test:
      #    if: "$AddSpaces"
      #    then: [t: " "]
      - t: "1‚†´‚†ø"                                  # circle (no oval in UEB)
# ??? What should happen with arrow?
#  If there is a box/circle with arrows only and an empty child,
#     then it acts like the arrow is the child
#  If there are only arrows for 'notation', then maybe rule 112 applies (superposition),
#     but the examples aren't similar. In that case, the arrow acts like 'box' and the child is the content... maybe  
# 
#  - test:
#      if: "contains(@notation,'leftarrow')"
#      then: [t: left arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' rightarrow ')"
#      then: [t: right arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northeastarrow')"
#      then: [t: northeast arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' southeastarrow ')"
#      then: [t: southeast arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' southwestarrow ')"
#      then: [t: southwest arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northwestarrow')"
#      then: [t: northwest arrow, pause: short]
#  - test:
#      if: "contains(@notation,'updownarrow')"
#      then: [t: double ended vertical arrow, pause: short]
#  - test:
#      if: "contains(@notation,'leftrightarrow')"
#      then: [t: double ended horizontal arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northeastsouthwestarrow')"
#      then: [t: double ended up diagonal arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northwestsoutheastarrow')"
#      then: [t: double ended down diagonal arrow, pause: short]
#  - test:
#      if: ".[contains(@notation,'actuarial')]"
#      then: [t: actuarial symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'madrub')]"
#      then: [t: arabic factorial symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'longdiv') or not(@notation) or normalize-space(@notation) ='']"      # default
#      then: [t: long division symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'radical')]"
#      then: [t: square root, pause: short]

   - test:
      # omit grouping indicators in the following cases
      if:   # FIX: need to add arbitrary shapes here (also for mroot) also multi-char leaf translations except mi
            # next test is to make sure there is just one symbol
            # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
      - "*[1][self::m:mn or"
      - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
      - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
      - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
      - "     IsInDefinition(., 'Arrows')"
      - "    ]"
      then: [x: "*[1]"]
      else:
      - t: "1‚†£"
      - x: "*[1]"
      - t: "1‚†ú"

   # - test:
   #    if: "contains(@notation,'phasorangle')"  #FIX: what should this be???
   #    then: [t: "‚†´‚†™‚†∏‚†´"]
   - test:
      if: "contains(@notation,'arrow')"    # all the arrows
      then:
      - test:
         - if: "contains(@notation,'rightarrow')" 
           then: [t: "1‚†≥‚†ï"]                                                           
         - else_if: "contains(@notation,'leftarrow')" 
           then: [t: "1‚†≥‚†™"]                                                           
         - else_if: "contains(@notation,'uparrow')" 
           then: [t: "1‚†≥‚†¨ "]                                                           
         - else_if: "contains(@notation,'downarrow')" 
           then: [t: "1‚†≥‚†©"]                                                           
         - else_if: "contains(@notation,'northeastarrow')" 
           then: [t: "1‚†≥‚†é"]                                                           
         - else_if: "contains(@notation,'southeastarrow')" 
           then: [t: "1‚†≥‚†£"]                                                           
         - else_if: "contains(@notation,'northwestarrow')" 
           then: [t: "1‚†≥‚†±"]                                                           
         - else_if: "contains(@notation,'southwestarrow')" 
           then: [t: "1‚†≥‚†ú"]                                                           
         - else_if: "contains(@notation,'leftrightarrow')" 
           then: [t: "1‚†≥‚†∫‚†ó‚†ï"]                                                           
         - else_if: "contains(@notation,'updownarrow')" 
           then: [t: "1‚†≥‚†∫‚†ó‚†¨"]                                                           
         - else_if: "contains(@notation,'northeastsouthwestarrow')" 
           then: [t: "1‚†≥‚†∫‚†ó‚†é"]                                                           
         - else_if: "contains(@notation,'northwestsoutheastarrow')" 
           then: [t: "1‚†≥‚†∫‚†ó‚†£"]                                                           
   - test:
      if: "contains(@notation,'top')"
      then: [t: "‚†±"]                                                                
   - test:
      if: "contains(@notation,'bottom')"
      then: [t: "‚††‚†±"]                                                                
   - test:
      if: "contains(@notation,'updiagonalstrike') or contains(@notation,'downdiagonalstrike') or 
            contains(@notation,'verticalstrike') or contains(@notation,'horizontalstrike')"
      then:
         - t: "1‚†à‚†±"                        # cancellation
   - test:
      if:
      - "not($AddSpaces) and contains(@notation,'box') or contains(@notation,'circle') or"
      - "contains(@notation,'arrow') or contains(@notation,'phasorangle')" 
      then:
      - t: "‚†ª"                   # terminate shape
      # - test:
      #    if: "$AddSpaces"
      #    then: [t: " "]
   - test:
      if: "contains(concat(' ', normalize-space(@notation), ' '), ' right ')"                  #avoid 'rightarrow'
      then: [t: "‚†∏"]



-
   name: default
   tag: ms
   match: "."
   replace:
      - test:
         if: "string(@lquote)!=''"
         then: [x: "@lquote"]
         else: [t: "‚†Ñ‚†Ñ"]
      - x: "BrailleChars(., 'UEB')"
      - test:
         if: "string(@rquote)!=''"
         then: [x: "@rquote"]
         else: [t: "‚†Ñ‚†Ñ"]

-
   name: default
   tag: semantics
   match: "."
   replace: 
      - x: "*[1]"             #/ FIX: should prioritize @encoding="MathML-Presentation" and @encoding="application/mathml-presentation+xml"

-
   name: default-children
   tag: "*"
   match: "*"    # make sure there are children
   replace: 
   - t: "unknown math m l element"
   - x: "name(.)"
   - x: "*"

-
   # at this point, we know there are no children -- might be no text
   name: default-no-children
   tag: "*"
   match: "text()"
   replace: 
   - t: unknown math m l element
   - x: "name(.)"
   - x: "text()"

-
   name: default-no-text
   tag: "*"
   match: "."
   replace: 
    - t: "empty unknown math m l element"
    - x: "name(.)"
